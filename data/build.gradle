import com.android.build.gradle.internal.dsl.CoreBuildType

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        loadProperties debug, 'build.properties'
        loadProperties release, 'release.properties'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    kapt {
        generateStubs = true
    }

    android {
        lintOptions {
            abortOnError false
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile("com.android.support.test.espresso:espresso-core:$tests_espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile "junit:junit:$tests_junit_version"
    testCompile "org.mockito:mockito-core:$tests_mockito_version"

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    //RxKotlin
    compile group: 'io.reactivex', name: 'rxkotlin', version: rx_kotlin

    //Retrofit
    compile "com.squareup.retrofit2:retrofit:$retrofit_version"
    compile "com.squareup.retrofit2:converter-gson:$retrofit_version"
    compile "com.squareup.retrofit2:adapter-rxjava:$retrofit_version"

    //Dagger2
    compile "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    //Stetho
    compile "com.facebook.stetho:stetho:$stetho_version"
    compile "com.facebook.stetho:stetho-okhttp3:$stetho_version"
}

def loadProperties(CoreBuildType buildtype,  String propertyFile) {
    def propsFile = rootProject.file(propertyFile)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        props.entrySet().each {
            //noinspection GroovyAssignabilityCheck
            buildtype.buildConfigField "String", it.key.toString().toUpperCase().replace('.', '_'),
                    "${it.value.toString()}"
        }
    } else {
        buildtype.buildConfigField "String", it.key.toString().toUpperCase().replace('.', '_'),
                "\"Api key not defined\""
    }
}